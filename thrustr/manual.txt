this is a "how to" on thrustr engine


-------       initialization and rendering       -------


you need to call the "handle.init" function to start up the game (thrustr.basic namespace)
you can call this anywhere, but i recommend calling it in the "Main" function

handle.init has 2 parameters:
    1. a start function
    2. a render function

the start function is simple, 
just make a function, called whatever, no parameters

the render function is slightly more complicated,
you need to add 1 parameter (wow so hard) with a type of ICanvas (SimulationFramework.Drawing namespace)


-------       the "intro"       -------


the intro is the little thing in the bottom left when you start your project
you can disable this by setting handle.do_intro
you can also change the font by setting handle.intro_font


-------       fontie       -------


fontie is an easy to use "font renderer" (in quotes because it cant handle ttf or otf)
it is in the namespace "thrustr.basic"

--  usage  --

you can create new fonts by creating a variable of type font, and assigning it to font.gen_font()

font.gen_font() accepts 4 parameters
    1. the texture
    2. the character set
    3. the distance from the top of the sprite and the top of the actual characters excluding accents (OPTIONAL)
    4. the distance from the top of the sprite and the bottom of the actual characters excluding parts that hang down (OPTIONAL)

the texture is just an atlas of all of the characters, layed out horizontally, with the same spacing
the character set is a string that contains all of the characters in the texture, in order of how they appear

you can also use font.gen_font_wpath()

it also has 4 parameters
    1. the texture
    2. a path
    3. the distance from the top of the sprite and the top of the actual characters excluding accents (OPTIONAL)
    4. the distance from the top of the sprite and the bottom of the actual characters excluding parts that hang down (OPTIONAL)

the texture is the same as font.gen_font()
the path is the directory of a charater set file

the only difference between these is that the genfont_wpath function reads the data from a file instead of hardcoding it


you can render fonts by calling the Canvas.thr_DrawText() function (ICanvas being a class from SimulationFramework.Drawing that is provided in the render function)

Canvas.thr_DrawText() accepts 5/6 parameters
    1. the text
    2. the position (can be a Vector2 or 2 floats)
    3. the alignment (OPTIONAL)
    4. the scale (OPTIONAL)
    5. the font (OPTIONAL)

you can change the color of the text using ICanvas.Fill()

currently there is 1 helper function that fontie provides: fontie.predicttextwidth

it accepts 3 parameters
    1. the text
    2. the scale (OPTIONAL)
    3. the font (OPTIONAL)

this returns the width in pixels of some text when rendered in the specified font


-------       stackr       -------

stackr is a sprite-stacking library i made to make sprite-stacking easier
if you do not know what sprite-stacking is, here is some text i copied from https://community.flowlab.io/t/sprite-sandwich-a-guide-to-spritestacking/40779

"Spritestacking is a way to create top-down visuals in a 2D game engine. It is the only easy way to 
make 3D looking objects in 2D only engines, you can use it to impress friends that don’t know how to 
do it, it is in most cases more comfy than 3D models on your computer, and geometric complexity doesn’t 
increase computer strain unlike 3D models. The catch, of course, is that unless you get really advanced, 
you cannot create a lighting system akin to a regular 3D game."

stackr is in the "thrustr.stackr" namespace

how to use stackr:

first you need to populate your scene
you can do this with the stackr.add_obj() function

--  adding an object  --

the add_obj function has 3 parameters
    1. the object
    2. the position (optional)
    3. the rotation (optional)

the object is an ssobj

what is an ssobj you ask?
an ssobj is a class that stores a sprite-stacked object

it has 4 variables:
    the stack texture
    the size of the base layer
    the layer count
    the tint

you can create an ssobj using stackr.create_obj()

this has 3 parameters
    1. the stack texture
    2. the size of the base
    3. the tint (optional)

the stack texture is a texture of each layer, this store a horizontal slice of each layer
the layers in the texture are stored vertically, the top is the top, the bottom is the bottom

the size of the base is just a Vector2 that stores the size of a single slice, x being x, z being y

the tint is a Color that you can specify to tint the stack

ok, back to the addobj function

the position is a Vector3 that stores it's worldspace position in pixels
the rotation is a float that stores it's worldspace rotation in radians

--  rendering  --

you can render the scene using 1 of 2 functions

Canvas.thr_stackr_RenderScene()
Canvas.thr_stackr_RenderSceneAndClear()

Canvas.thr_stackr_RenderSceneAndClear() just calls the render function, and clears the scene

Canvas.thr_stackr_RenderScene() renders the scene
this renders using a camera, which you can set

the camera can be set with 2 variables
    1. the position: "cam"
    2. the rotation: "camrot"

the position is a Vector3 in pixels
the rotation is a float in radians

the camera is automatically centered


-------       athr       -------

athr is an animation library i made to make it easy to handle animations
it's a little complicated, so this part might be a little long

athr can be accessed using the "thrustr.athr" namespace

--  setup  --

first you need 2 files
    1. the sprite-sheet
    2. the athr file

the athr file is a custom file format (".athr")
here is an example athr file:

bw 8
bh 8

anim
    frame
        0 0
        1 0
        0 1
        1 1 endevt

let's dissect this!

"bw" and "bh" stand for "base width", and "base height"
the 8 after each one is the value of those, so if you had a base width of 16 and a base height of 2, it would look something like this:

bw 16
bh 2

"anim" just marks the start of the definitions of the animations

frame is the name of one the animations
you can ONLY have letters of the alphabet in the name (anything that qualifies in the char.IsLetter() function)
after that you have some values
they are the positions of each frame in the sprite-sheet, scaled down by bw and bh
so "1 1" would be equivalent to vec2(bw*1,bh*1)

"endevt" is an event, you can add these anywhere, and you do not need them, but these have the same naming rules as the animation name
you can have functions that are called on the first frame it goes to the event

you can have more animations afterwards, but i didnt include those
it would look something like this though

bw 8
bh 8

anim
    frame
        0 0
        1 0
        0 1
        1 1 endevt
    frame2
        0 0
        1 0
        0 1
        1 1
        2 2
        6346 1

there are no comments, but the file is simple enough to where i don't think you would need those

--  loading  --

you first need to create a variable of type "animation" (this will be referenced as "animvar" in the manual)

you can set it to animation.load_from_path() or animation.load_from_data()
animation.load_from_path() just calls animation.load_from_data(), but it loads the athr file automatically

animation.load_from_path() accepts 2 parameters:
    1. the path
    2. the sprite-sheet

animation.load_from_data() accepts 2 parameters:
    1. the data in the athr file
    2. the sprite-sheet

the sprite-sheet is just an ITexture


next, you need to set the current animation
you can set the animation by calling animvar.anim = "name of anim";

next, you set the fps of the animation
you can set the fps by calling animvar.fps = value_of_fps;


--  usage  --

alright, now we can finally render our animations!

so, what you want to do is inside of your render function, you want to call animvar.update(Time.DeltaTime);
what this will do is update the current frame of the animation

then, to actually draw your animation, you call
Canvas.thr_DrawAnimation()

this accepts anywhere from 7-2 parameters:
    1. the animvar
    2. the position (can be vec2 or individual values)
    3. the size (can be vec2 or individual values) (OPTIONAL)
    4. the alignment (OPTIONAL)
    5. the tint (can be Color or ColorF) (OPTIONAL)

now you can draw the animation!

if you want to use the events, then heres how
you can add the name of the event into the dictionary called "events" in the animvar
it accepts the name of the event, and the action
the action will be called when the current frame switches to the frame with the event